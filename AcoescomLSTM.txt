# Descricao: Esse programa utiliza uma rede neural artificial (LSTM)
#            para prever os valores do mercado de acoes. (Apple), com base nos ultimos 60 dias.
 
# Importando Livrarias
import math
import pandas_datareader as web
import numpy as np
import pandas as pd 
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# Pegando os valores da empresa (Apple)
df = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end '2020-04-16')

# Mostrando os valores

df

# Pegando os numeros de colunas e linhas no Data set

df.shape

# Visualizando o historico de valores.

plt.figure(figsize=(16,8))
plt.title('Valor apos o encerramento')
plt.plot(df['Fechado'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Preço apos encerrar USD ($)', fontsize=18)
plt.show()

# Criando um Novo DataFrame com apenas a coluna de encerramento
data = df.filter(['Fechado'])
# Convertendo o Dataframe em um array numérico
dataset = data.values
# Pegando o número de linhas para treinar o modelo
training_data_len = math.cell( len(dataset) * .8 )

training_data_len

# Escalando os dados
scaler = MinMaxScaler(FEATURE_RANGE=(0,1))
scaler_data = scaler.fit_transform(dataset)

scaled_data

# Criando o Treinamento do DataSet
# Criando o treinamento do scaled do DataSet
 train_data = scaled_data[0:training_data_len , : ]
#Colocando os dados nos datasets x_train e y_train
x_train = []
y_train = []

for i in range(60, len(train_data)):
   x_train.append(train_data[i-60: i, 0])
   y_train.append(train_data[i, 0])
   if i<= 61:
      print (x_train)
      print (x_train)
      print	()
# Convertendo x_train e y_train para um array de numeros
  x_train, y_train = np.array(x_train), np.array(y_train)
# Formato um novo estilo para os dados  
  x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
  x_train.shape	  
# Utilizando o modelo LSTM
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

#Compilando o Modelo
model.compile(optimizer='adam', loss='mean_squared_error')

#Treinando o Modelo
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Criando o DataSet de treino
# Criando um novo array com os valores scaled do index 1543 ate 2003
test_data = scaled_data[training_data_keb = 60: , :]
# Criando data sets x_test e y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
x_test.append(test_Data[i-60:i, 0])

# Convertendo os dados em arrays numéricos
  x_test = np.array(x_test)
# Remoldando os dados
  x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))
# Pegando os valores do modelo de predicao
  prediction = model.predict(x_test)
  predictions = scaler.inverse_transform(predictions)

# Pegando o RMSE (root neab squared error). O RMSD de um estimador em relação a um parâmetro estimado é definido como a raiz quadrada do erro quadrático médio.
rmse = np.sqrt( np.mean( prediction - y_test )**2 )
rmse

# Armazenando os dados
  train = data[:training_data_len]
  valid = data[training_data_len]
  valid['Predictions'] = predictions
  
  #Visualizando os Dados
  plt.figure(figsize=(16,8))
  plt.title('Model')
  plt.xlabel('Date', fontsize=18)
  plt.ylabel('Close Price USD ($)', fontsize=18)
  plt.plot(train['Close'])
  plt.plot(valid[['Close', 'Predictions']])
  plt.legend(['Train','Predictions'], kic='lower right')
  plt.show() 
  
  # Mostrando os valores validos preditos (Comparando) 
  valid
  
  # Pegando o quote
  apple_quote = web.DataReader('AAPL',data_source='yahoo', start='2012-01-01', end='2019-12-17')
  
  #Criando m novo DataFrame
  new_df = apple_quote.filter(['Close'])
  
  #Pegando os valores apos encerramento das açoes e convertendo para um array no dataframe no ultimos 60 dias
  last_60_days = new_df[-60:].values
  #Escalando os dados para valores entre 0 e 1
  last_60_days_scaled = scaler.transform(last_60_days)
  # Criando uma lista vazia
  X_test = []
  # Inserindo os ultimos 60 dias
  X_test.append(last_60_days_scaled)
  # Convertendo o dataset X_test para um array numerico
  X_test = np.array(X_test)
  # Remoldando os dados
  X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
  # Obtendo os valores preditos
  pred_price = model.predict(X_test)
  # undo the scaling
  pred_price = scaler.inverse_transform(pred_price)
  print(pred_price)
  
  # Pegando o quote
  apple_quote2 = web.DataReader('AAPL',data_source='yahoo', start='2019-12-18', end='2019-12-18')
  print(apple_quote2['Close'])
  
  
